name: Build Libbox

on:
  push:
    tags:
      - 'v*'

jobs:
  setup-environment:
    runs-on: macos-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Checkout code
        uses: actions/checkout@v3

  apply-patch:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Apply Patch
        run: |
          # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
          # git apply path/to/patchfile.patch
          # –ó–∞–∫–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö —à–∞–≥–∞—Ö
          # git config user.name "github-actions[bot]"
          # git config user.email "github-actions[bot]@users.noreply.github.com"
          # git commit -am "Apply patch to codebase"

  build-android:
    name: Build Android Library
    runs-on: ubuntu-latest
    needs: apply-patch
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Install OpenJDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install custom gomobile
        run: |
          go install github.com/sagernet/gomobile/cmd/gomobile@v0.1.4
          go install github.com/sagernet/gomobile/cmd/gobind@v0.1.4
          gomobile init

      - name: Build Android Library
        run: go run ./cmd/internal/build_libbox -target android

      - name: Save Android Output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: libbox-android
          path: libbox.aar

  build-ios:
    name: Build iOS Library
    runs-on: macos-latest
    needs: apply-patch
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Install custom gomobile
        run: |
          go install github.com/sagernet/gomobile/cmd/gomobile@v0.1.4
          go install github.com/sagernet/gomobile/cmd/gobind@v0.1.4
          gomobile init

      - name: Build iOS Library
        run: go run ./cmd/internal/build_libbox -target ios

      - name: Package iOS Library
        run: zip -r Libbox.xcframework.zip Libbox.xcframework

      - name: Save iOS Output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: libbox-ios
          path: Libbox.xcframework.zip

  release:
    name: Upload to GitHub Releases
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    steps:
      - name: Download Android Artifact
        uses: actions/download-artifact@v3
        with:
          name: libbox-android
          path: ./android

      - name: Download iOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: libbox-ios
          path: ./ios

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./android/libbox.aar
            ./ios/Libbox.xcframework.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-telegram:
    name: Notify Telegram Channel
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Send Success Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          RELEASE_URL: ${{ github.event.repository.html_url }}/releases/tag/${{ github.ref_name }}
        run: |
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \
          -d chat_id=$CHAT_ID \
          -d text="üéâ Release [${{ github.ref_name }}]($RELEASE_URL) —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub Releases."

  notify-telegram-failure:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send Failure Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \
          -d chat_id=$CHAT_ID \
          -d text="‚ùå –°–±–æ—Ä–∫–∞ –¥–ª—è [${{ github.ref_name }}]($WORKFLOW_URL) –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π."
